
HW3dump.ino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000079a  0000082e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000079a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800104  00800104  00000832  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000832  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000888  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000107d  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000775  00000000  00000000  00001a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a22  00000000  00000000  00002202  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  00002c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d2  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000020e  00000000  00000000  00003052  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00003260  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00800100 l    d  .data	00000000 .data
00000000 l    d  .text	00000000 .text
00800104 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .note.gnu.avr.deviceinfo	00000000 .note.gnu.avr.deviceinfo
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 rand.c
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
000002ee l     F .text	00000092 do_rand
00800100 l     O .data	00000004 next
00000000 l    df *ABS*	00000000 _clear_bss.o
00000094 l       .text	00000000 .do_clear_bss_start
00000092 l       .text	00000000 .do_clear_bss_loop
00000000 l    df *ABS*	00000000 
0000003e l       *ABS*	00000000 __SP_H__
0000003d l       *ABS*	00000000 __SP_L__
0000003f l       *ABS*	00000000 __SREG__
00000000 l       *ABS*	00000000 __tmp_reg__
00000001 l       *ABS*	00000000 __zero_reg__
00800114 l     O .bss	00000004 timer0_millis
00800113 l     O .bss	00000001 timer0_fract
0080010f l     O .bss	00000004 timer0_overflow_count
0080010e l     O .bss	00000001 result_8
0080010c l     O .bss	00000002 result_16
00800108 l     O .bss	00000004 result_32
00800104 l     O .bss	00000004 result_f
00000000 l    df *ABS*	00000000 _divmodsi4.o
000003c4 l       .text	00000000 __divmodsi4_neg2
000003d2 l       .text	00000000 __divmodsi4_exit
00000000 l    df *ABS*	00000000 _udivmodsi4.o
00000430 l       .text	00000000 __udivmodsi4_ep
00000416 l       .text	00000000 __udivmodsi4_loop
00000000 l    df *ABS*	00000000 _divmodhi4.o
0000075e l       .text	00000000 __divmodhi4_neg1
00000766 l       .text	00000000 __divmodhi4_neg2
0000076c l       .text	00000000 __divmodhi4_exit
00000000 l    df *ABS*	00000000 _udivmodhi4.o
00000784 l       .text	00000000 __udivmodhi4_ep
00000776 l       .text	00000000 __udivmodhi4_loop
00000000 l    df *ABS*	00000000 _exit.o
00000798 l       .text	00000000 __stop_program
000000a2  w      .text	00000000 __vector_22
0000044e g       .text	0000001e .hidden __umulhisi3
000000a2  w      .text	00000000 __vector_1
0000ffa0 g       *ABS*	00000000 __DATA_REGION_LENGTH__
00000546 g     F .text	00000008 __divsf3
000006d2 g     F .text	00000022 __fp_round
000006f4 g     F .text	00000044 __fp_split3
0000076e g       .text	00000028 .hidden __udivmodhi4
00000068 g       .text	00000000 __trampolines_start
0000079a g       .text	00000000 _etext
0000046c g     F .text	0000000e __subsf3
000000a2  w      .text	00000000 __vector_24
000000a2  w      .text	00000000 __vector_12
000000a2 g       .text	00000000 __bad_interrupt
0000079e g       *ABS*	00000000 __data_load_end
000000a2  w      .text	00000000 __vector_6
00000068 g       .text	00000000 __trampolines_end
000000a2  w      .text	00000000 __vector_3
00000738 g     F .text	0000000e __fp_zero
000000a2  w      .text	00000000 __vector_23
0000079a g       *ABS*	00000000 __data_load_start
00000068 g       .text	00000000 __dtors_end
00800118 g       .bss	00000000 __bss_end
000003e4 g       .text	00000016 .hidden __muluhisi3
00000400 g       *ABS*	00000000 __LOCK_REGION_LENGTH__
000000a2  w      .text	00000000 __vector_25
0000056e g     F .text	000000dc __divsf3x
000000a2  w      .text	00000000 __vector_11
00000068  w      .text	00000000 __init
00000000  w      *UND*	00000000 _Z14serialEventRunv
000000a2  w      .text	00000000 __vector_13
00000380 g     F .text	00000006 rand_r
000000a2  w      .text	00000000 __vector_17
000006b0 g     F .text	00000006 __fp_nan
000000a2  w      .text	00000000 __vector_19
000000a2  w      .text	00000000 __vector_7
000006a4 g     F .text	0000000c __fp_inf
0000008a g       .text	00000010 .hidden __do_clear_bss
00810000 g       .comment	00000000 __eeprom_end
00000386 g     F .text	0000000a rand
0000062e g       .text	00000000 __floatsisf
00000000 g       .text	00000000 __vectors
00800104 g       .data	00000000 __data_end
00000000  w      .text	00000000 __vector_default
00000746 g       .text	00000028 .hidden __divmodhi4
000000a2  w      .text	00000000 __vector_5
00000400 g       *ABS*	00000000 __SIGNATURE_REGION_LENGTH__
00000068 g       .text	00000000 __ctors_start
00000074 g       .text	00000016 .hidden __do_copy_data
000006c4 g     F .text	0000000e __fp_pscB
00000704 g       .text	00000000 __fp_splitA
00800104 g       .bss	00000000 __bss_start
0000013a g     F .text	000001b4 main
00000390 g     F .text	00000016 srand
000000a2  w      .text	00000000 __vector_4
00800060 g       *ABS*	00000000 __DATA_REGION_ORIGIN__
000003d4 g       .text	00000010 .hidden __negsi2
00000000  w      *ABS*	00000000 __heap_end
000000a2  w      .text	00000000 __vector_9
000000a2  w      .text	00000000 __vector_2
0000049c g     F .text	000000cc __addsf3x
00000400 g       *ABS*	00000000 __USER_SIGNATURE_REGION_LENGTH__
000000a2  w      .text	00000000 __vector_21
000000a2  w      .text	00000000 __vector_15
000006b6 g     F .text	0000000e __fp_pscA
00000400 g       .text	0000000a .hidden __mulohisi3
00000068 g       .text	00000000 __dtors_start
00000068 g       .text	00000000 __ctors_end
000003a6 g       .text	0000002e .hidden __divmodsi4
000008ff  w      *ABS*	00000000 __stack
00800104 g       .data	00000000 _edata
00800118 g       .comment	00000000 _end
000000a2  w      .text	00000000 __vector_8
00000574 g       .text	00000000 __divsf3_pse
00000796  w      .text	00000000 .hidden exit
0000062a g     F .text	0000007a __floatunsisf
00000746 g       .text	00000000 .hidden _div
0000040a g       .text	00000044 .hidden __udivmodsi4
00010000 g       *ABS*	00000000 __EEPROM_REGION_LENGTH__
00000796 g       .text	00000000 .hidden _exit
000000a2  w      .text	00000000 __vector_14
000000a2  w      .text	00000000 __vector_10
000000a6 g     F .text	00000094 __vector_16
00800100 g       .data	00000000 __data_start
000000a2  w      .text	00000000 __vector_18
00000003 g       *ABS*	00000000 __FUSE_REGION_LENGTH__
00020000 g       *ABS*	00000000 __TEXT_REGION_LENGTH__
000000a2  w      .text	00000000 __vector_20
0000046e g       .text	00000000 __addsf3
0000073a g       .text	00000000 __fp_szero
000003fa g       .text	00000006 .hidden __mulshisi3



Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  9e:	0c 94 cb 03 	jmp	0x796	; 0x796 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  bc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <timer0_millis>
  c0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <timer0_millis+0x1>
  c4:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <timer0_millis+0x2>
  c8:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
  cc:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
  d4:	2d 37       	cpi	r18, 0x7D	; 125
  d6:	58 f5       	brcc	.+86     	; 0x12e <__vector_16+0x88>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	a1 1d       	adc	r26, r1
  dc:	b1 1d       	adc	r27, r1
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
  de:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <timer0_fract>
	timer0_millis = m;
  e2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timer0_millis>
  e6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timer0_millis+0x1>
  ea:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timer0_millis+0x2>
  ee:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timer0_millis+0x3>
	timer0_overflow_count++;
  f2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer0_overflow_count>
  f6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timer0_overflow_count+0x1>
  fa:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <timer0_overflow_count+0x2>
  fe:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <timer0_overflow_count+0x3>
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	a1 1d       	adc	r26, r1
 106:	b1 1d       	adc	r27, r1
 108:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timer0_overflow_count>
 10c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <timer0_overflow_count+0x1>
 110:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <timer0_overflow_count+0x2>
 114:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <timer0_overflow_count+0x3>
}
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	3f 91       	pop	r19
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 12e:	26 e8       	ldi	r18, 0x86	; 134
 130:	23 0f       	add	r18, r19
		m += 1;
 132:	02 96       	adiw	r24, 0x02	; 2
 134:	a1 1d       	adc	r26, r1
 136:	b1 1d       	adc	r27, r1
 138:	d2 cf       	rjmp	.-92     	; 0xde <__vector_16+0x38>

0000013a <main>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 13a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 13c:	84 b5       	in	r24, 0x24	; 36
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 142:	84 b5       	in	r24, 0x24	; 36
 144:	81 60       	ori	r24, 0x01	; 1
 146:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 148:	85 b5       	in	r24, 0x25	; 37
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 14e:	85 b5       	in	r24, 0x25	; 37
 150:	81 60       	ori	r24, 0x01	; 1
 152:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 154:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 15e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 162:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 166:	82 60       	ori	r24, 0x02	; 2
 168:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 16c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 170:	81 60       	ori	r24, 0x01	; 1
 172:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 176:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 180:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 184:	84 60       	ori	r24, 0x04	; 4
 186:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 18a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 194:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS1);
 19e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 1a2:	82 60       	ori	r24, 0x02	; 2
 1a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS0);
 1a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 1b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 1bc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 1c0:	c0 e0       	ldi	r28, 0x00	; 0
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
  int8_t a,b;
  int16_t c,d;
  int32_t e,f;
  float g,h;

  a = (int8_t) (rand() & 0xFF);
 1c4:	0e 94 c3 01 	call	0x386	; 0x386 <rand>
 1c8:	68 2e       	mov	r6, r24
  b = (int8_t) (rand() & 0xFF);
 1ca:	0e 94 c3 01 	call	0x386	; 0x386 <rand>
 1ce:	78 2e       	mov	r7, r24
  c = (int16_t) (rand() & 0xFFFF);
 1d0:	0e 94 c3 01 	call	0x386	; 0x386 <rand>
 1d4:	6c 01       	movw	r12, r24
  d = (int16_t) (rand() & 0xFFFF);
 1d6:	0e 94 c3 01 	call	0x386	; 0x386 <rand>
 1da:	7c 01       	movw	r14, r24
  e = (int32_t) (rand() & 0xFFFFFFFF);
 1dc:	0e 94 c3 01 	call	0x386	; 0x386 <rand>
 1e0:	4c 01       	movw	r8, r24
 1e2:	99 0f       	add	r25, r25
 1e4:	aa 08       	sbc	r10, r10
 1e6:	bb 08       	sbc	r11, r11
  f = (int32_t) (rand() & 0xFFFFFFFF);
 1e8:	0e 94 c3 01 	call	0x386	; 0x386 <rand>
 1ec:	8c 01       	movw	r16, r24
 1ee:	99 0f       	add	r25, r25
 1f0:	22 0b       	sbc	r18, r18
 1f2:	33 0b       	sbc	r19, r19

  asm volatile("nop");
 1f4:	00 00       	nop
  result_8 = a-b;
 1f6:	86 2d       	mov	r24, r6
 1f8:	87 19       	sub	r24, r7
 1fa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <result_8>
  asm volatile("nop");
 1fe:	00 00       	nop
  result_16 = c-d;
 200:	c6 01       	movw	r24, r12
 202:	8e 19       	sub	r24, r14
 204:	9f 09       	sbc	r25, r15
 206:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <result_16+0x1>
 20a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <result_16>
  asm volatile("nop");
 20e:	00 00       	nop
  result_32 = e-f;
 210:	d5 01       	movw	r26, r10
 212:	c4 01       	movw	r24, r8
 214:	80 1b       	sub	r24, r16
 216:	91 0b       	sbc	r25, r17
 218:	a2 0b       	sbc	r26, r18
 21a:	b3 0b       	sbc	r27, r19
 21c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <result_32>
 220:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <result_32+0x1>
 224:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <result_32+0x2>
 228:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <result_32+0x3>
  asm volatile("nop");
 22c:	00 00       	nop
  result_8 = a/b;
 22e:	86 2d       	mov	r24, r6
 230:	66 0c       	add	r6, r6
 232:	99 0b       	sbc	r25, r25
 234:	67 2d       	mov	r22, r7
 236:	77 0c       	add	r7, r7
 238:	77 0b       	sbc	r23, r23
 23a:	0e 94 a3 03 	call	0x746	; 0x746 <__divmodhi4>
 23e:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <result_8>
  asm volatile("nop");
 242:	00 00       	nop
  result_16 = c/d;
 244:	c6 01       	movw	r24, r12
 246:	b7 01       	movw	r22, r14
 248:	0e 94 a3 03 	call	0x746	; 0x746 <__divmodhi4>
 24c:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <result_16+0x1>
 250:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <result_16>
  asm volatile("nop");
 254:	00 00       	nop
  result_32 = e/f;
 256:	c5 01       	movw	r24, r10
 258:	b4 01       	movw	r22, r8
 25a:	a9 01       	movw	r20, r18
 25c:	98 01       	movw	r18, r16
 25e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__divmodsi4>
 262:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <result_32>
 266:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <result_32+0x1>
 26a:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <result_32+0x2>
 26e:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <result_32+0x3>
  asm volatile("nop");
 272:	00 00       	nop

  g = (float) (rand() & 0xFF);
 274:	0e 94 c3 01 	call	0x386	; 0x386 <rand>
 278:	bc 01       	movw	r22, r24
 27a:	77 27       	eor	r23, r23
 27c:	07 2e       	mov	r0, r23
 27e:	00 0c       	add	r0, r0
 280:	88 0b       	sbc	r24, r24
 282:	99 0b       	sbc	r25, r25
 284:	0e 94 17 03 	call	0x62e	; 0x62e <__floatsisf>
 288:	6b 01       	movw	r12, r22
 28a:	7c 01       	movw	r14, r24
  h = (float) (rand() & 0xFF);
 28c:	0e 94 c3 01 	call	0x386	; 0x386 <rand>
 290:	bc 01       	movw	r22, r24
 292:	77 27       	eor	r23, r23
 294:	07 2e       	mov	r0, r23
 296:	00 0c       	add	r0, r0
 298:	88 0b       	sbc	r24, r24
 29a:	99 0b       	sbc	r25, r25
 29c:	0e 94 17 03 	call	0x62e	; 0x62e <__floatsisf>
 2a0:	4b 01       	movw	r8, r22
 2a2:	5c 01       	movw	r10, r24

  asm volatile("nop");
 2a4:	00 00       	nop
  result_f = g-h;
 2a6:	ac 01       	movw	r20, r24
 2a8:	9b 01       	movw	r18, r22
 2aa:	c7 01       	movw	r24, r14
 2ac:	b6 01       	movw	r22, r12
 2ae:	0e 94 36 02 	call	0x46c	; 0x46c <__subsf3>
 2b2:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 2b6:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 2ba:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 2be:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
  asm volatile("nop");
 2c2:	00 00       	nop
  result_f = g/h;
 2c4:	a5 01       	movw	r20, r10
 2c6:	94 01       	movw	r18, r8
 2c8:	c7 01       	movw	r24, r14
 2ca:	b6 01       	movw	r22, r12
 2cc:	0e 94 a3 02 	call	0x546	; 0x546 <__divsf3>
 2d0:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 2d4:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 2d8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 2dc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
  asm volatile("nop");
 2e0:	00 00       	nop
 2e2:	20 97       	sbiw	r28, 0x00	; 0
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <main+0x1ae>
 2e6:	6e cf       	rjmp	.-292    	; 0x1c4 <main+0x8a>
 2e8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 2ec:	6b cf       	rjmp	.-298    	; 0x1c4 <main+0x8a>

000002ee <do_rand>:
 2ee:	8f 92       	push	r8
 2f0:	9f 92       	push	r9
 2f2:	af 92       	push	r10
 2f4:	bf 92       	push	r11
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
 304:	68 81       	ld	r22, Y
 306:	79 81       	ldd	r23, Y+1	; 0x01
 308:	8a 81       	ldd	r24, Y+2	; 0x02
 30a:	9b 81       	ldd	r25, Y+3	; 0x03
 30c:	61 15       	cp	r22, r1
 30e:	71 05       	cpc	r23, r1
 310:	81 05       	cpc	r24, r1
 312:	91 05       	cpc	r25, r1
 314:	21 f4       	brne	.+8      	; 0x31e <do_rand+0x30>
 316:	64 e2       	ldi	r22, 0x24	; 36
 318:	79 ed       	ldi	r23, 0xD9	; 217
 31a:	8b e5       	ldi	r24, 0x5B	; 91
 31c:	97 e0       	ldi	r25, 0x07	; 7
 31e:	2d e1       	ldi	r18, 0x1D	; 29
 320:	33 ef       	ldi	r19, 0xF3	; 243
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <__divmodsi4>
 32a:	49 01       	movw	r8, r18
 32c:	5a 01       	movw	r10, r20
 32e:	9b 01       	movw	r18, r22
 330:	ac 01       	movw	r20, r24
 332:	a7 ea       	ldi	r26, 0xA7	; 167
 334:	b1 e4       	ldi	r27, 0x41	; 65
 336:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__muluhisi3>
 33a:	6b 01       	movw	r12, r22
 33c:	7c 01       	movw	r14, r24
 33e:	ac ee       	ldi	r26, 0xEC	; 236
 340:	b4 ef       	ldi	r27, 0xF4	; 244
 342:	a5 01       	movw	r20, r10
 344:	94 01       	movw	r18, r8
 346:	0e 94 00 02 	call	0x400	; 0x400 <__mulohisi3>
 34a:	dc 01       	movw	r26, r24
 34c:	cb 01       	movw	r24, r22
 34e:	8c 0d       	add	r24, r12
 350:	9d 1d       	adc	r25, r13
 352:	ae 1d       	adc	r26, r14
 354:	bf 1d       	adc	r27, r15
 356:	b7 ff       	sbrs	r27, 7
 358:	03 c0       	rjmp	.+6      	; 0x360 <do_rand+0x72>
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	a1 09       	sbc	r26, r1
 35e:	b0 48       	sbci	r27, 0x80	; 128
 360:	88 83       	st	Y, r24
 362:	99 83       	std	Y+1, r25	; 0x01
 364:	aa 83       	std	Y+2, r26	; 0x02
 366:	bb 83       	std	Y+3, r27	; 0x03
 368:	9f 77       	andi	r25, 0x7F	; 127
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	ff 90       	pop	r15
 370:	ef 90       	pop	r14
 372:	df 90       	pop	r13
 374:	cf 90       	pop	r12
 376:	bf 90       	pop	r11
 378:	af 90       	pop	r10
 37a:	9f 90       	pop	r9
 37c:	8f 90       	pop	r8
 37e:	08 95       	ret

00000380 <rand_r>:
 380:	0e 94 77 01 	call	0x2ee	; 0x2ee <do_rand>
 384:	08 95       	ret

00000386 <rand>:
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	0e 94 77 01 	call	0x2ee	; 0x2ee <do_rand>
 38e:	08 95       	ret

00000390 <srand>:
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	a0 e0       	ldi	r26, 0x00	; 0
 394:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 398:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 39c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 3a0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 3a4:	08 95       	ret

000003a6 <__divmodsi4>:
 3a6:	05 2e       	mov	r0, r21
 3a8:	97 fb       	bst	r25, 7
 3aa:	1e f4       	brtc	.+6      	; 0x3b2 <__divmodsi4+0xc>
 3ac:	00 94       	com	r0
 3ae:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__negsi2>
 3b2:	57 fd       	sbrc	r21, 7
 3b4:	07 d0       	rcall	.+14     	; 0x3c4 <__divmodsi4_neg2>
 3b6:	0e 94 05 02 	call	0x40a	; 0x40a <__udivmodsi4>
 3ba:	07 fc       	sbrc	r0, 7
 3bc:	03 d0       	rcall	.+6      	; 0x3c4 <__divmodsi4_neg2>
 3be:	4e f4       	brtc	.+18     	; 0x3d2 <__divmodsi4_exit>
 3c0:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__negsi2>

000003c4 <__divmodsi4_neg2>:
 3c4:	50 95       	com	r21
 3c6:	40 95       	com	r20
 3c8:	30 95       	com	r19
 3ca:	21 95       	neg	r18
 3cc:	3f 4f       	sbci	r19, 0xFF	; 255
 3ce:	4f 4f       	sbci	r20, 0xFF	; 255
 3d0:	5f 4f       	sbci	r21, 0xFF	; 255

000003d2 <__divmodsi4_exit>:
 3d2:	08 95       	ret

000003d4 <__negsi2>:
 3d4:	90 95       	com	r25
 3d6:	80 95       	com	r24
 3d8:	70 95       	com	r23
 3da:	61 95       	neg	r22
 3dc:	7f 4f       	sbci	r23, 0xFF	; 255
 3de:	8f 4f       	sbci	r24, 0xFF	; 255
 3e0:	9f 4f       	sbci	r25, 0xFF	; 255
 3e2:	08 95       	ret

000003e4 <__muluhisi3>:
 3e4:	0e 94 27 02 	call	0x44e	; 0x44e <__umulhisi3>
 3e8:	a5 9f       	mul	r26, r21
 3ea:	90 0d       	add	r25, r0
 3ec:	b4 9f       	mul	r27, r20
 3ee:	90 0d       	add	r25, r0
 3f0:	a4 9f       	mul	r26, r20
 3f2:	80 0d       	add	r24, r0
 3f4:	91 1d       	adc	r25, r1
 3f6:	11 24       	eor	r1, r1
 3f8:	08 95       	ret

000003fa <__mulshisi3>:
 3fa:	b7 ff       	sbrs	r27, 7
 3fc:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__muluhisi3>

00000400 <__mulohisi3>:
 400:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__muluhisi3>
 404:	82 1b       	sub	r24, r18
 406:	93 0b       	sbc	r25, r19
 408:	08 95       	ret

0000040a <__udivmodsi4>:
 40a:	a1 e2       	ldi	r26, 0x21	; 33
 40c:	1a 2e       	mov	r1, r26
 40e:	aa 1b       	sub	r26, r26
 410:	bb 1b       	sub	r27, r27
 412:	fd 01       	movw	r30, r26
 414:	0d c0       	rjmp	.+26     	; 0x430 <__udivmodsi4_ep>

00000416 <__udivmodsi4_loop>:
 416:	aa 1f       	adc	r26, r26
 418:	bb 1f       	adc	r27, r27
 41a:	ee 1f       	adc	r30, r30
 41c:	ff 1f       	adc	r31, r31
 41e:	a2 17       	cp	r26, r18
 420:	b3 07       	cpc	r27, r19
 422:	e4 07       	cpc	r30, r20
 424:	f5 07       	cpc	r31, r21
 426:	20 f0       	brcs	.+8      	; 0x430 <__udivmodsi4_ep>
 428:	a2 1b       	sub	r26, r18
 42a:	b3 0b       	sbc	r27, r19
 42c:	e4 0b       	sbc	r30, r20
 42e:	f5 0b       	sbc	r31, r21

00000430 <__udivmodsi4_ep>:
 430:	66 1f       	adc	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	88 1f       	adc	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	1a 94       	dec	r1
 43a:	69 f7       	brne	.-38     	; 0x416 <__udivmodsi4_loop>
 43c:	60 95       	com	r22
 43e:	70 95       	com	r23
 440:	80 95       	com	r24
 442:	90 95       	com	r25
 444:	9b 01       	movw	r18, r22
 446:	ac 01       	movw	r20, r24
 448:	bd 01       	movw	r22, r26
 44a:	cf 01       	movw	r24, r30
 44c:	08 95       	ret

0000044e <__umulhisi3>:
 44e:	a2 9f       	mul	r26, r18
 450:	b0 01       	movw	r22, r0
 452:	b3 9f       	mul	r27, r19
 454:	c0 01       	movw	r24, r0
 456:	a3 9f       	mul	r26, r19
 458:	70 0d       	add	r23, r0
 45a:	81 1d       	adc	r24, r1
 45c:	11 24       	eor	r1, r1
 45e:	91 1d       	adc	r25, r1
 460:	b2 9f       	mul	r27, r18
 462:	70 0d       	add	r23, r0
 464:	81 1d       	adc	r24, r1
 466:	11 24       	eor	r1, r1
 468:	91 1d       	adc	r25, r1
 46a:	08 95       	ret

0000046c <__subsf3>:
 46c:	50 58       	subi	r21, 0x80	; 128

0000046e <__addsf3>:
 46e:	bb 27       	eor	r27, r27
 470:	aa 27       	eor	r26, r26
 472:	0e 94 4e 02 	call	0x49c	; 0x49c <__addsf3x>
 476:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__fp_round>
 47a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_pscA>
 47e:	38 f0       	brcs	.+14     	; 0x48e <__addsf3+0x20>
 480:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_pscB>
 484:	20 f0       	brcs	.+8      	; 0x48e <__addsf3+0x20>
 486:	39 f4       	brne	.+14     	; 0x496 <__addsf3+0x28>
 488:	9f 3f       	cpi	r25, 0xFF	; 255
 48a:	19 f4       	brne	.+6      	; 0x492 <__addsf3+0x24>
 48c:	26 f4       	brtc	.+8      	; 0x496 <__addsf3+0x28>
 48e:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_nan>
 492:	0e f4       	brtc	.+2      	; 0x496 <__addsf3+0x28>
 494:	e0 95       	com	r30
 496:	e7 fb       	bst	r30, 7
 498:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_inf>

0000049c <__addsf3x>:
 49c:	e9 2f       	mov	r30, r25
 49e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fp_split3>
 4a2:	58 f3       	brcs	.-42     	; 0x47a <__addsf3+0xc>
 4a4:	ba 17       	cp	r27, r26
 4a6:	62 07       	cpc	r22, r18
 4a8:	73 07       	cpc	r23, r19
 4aa:	84 07       	cpc	r24, r20
 4ac:	95 07       	cpc	r25, r21
 4ae:	20 f0       	brcs	.+8      	; 0x4b8 <__addsf3x+0x1c>
 4b0:	79 f4       	brne	.+30     	; 0x4d0 <__addsf3x+0x34>
 4b2:	a6 f5       	brtc	.+104    	; 0x51c <__addsf3x+0x80>
 4b4:	0c 94 9c 03 	jmp	0x738	; 0x738 <__fp_zero>
 4b8:	0e f4       	brtc	.+2      	; 0x4bc <__addsf3x+0x20>
 4ba:	e0 95       	com	r30
 4bc:	0b 2e       	mov	r0, r27
 4be:	ba 2f       	mov	r27, r26
 4c0:	a0 2d       	mov	r26, r0
 4c2:	0b 01       	movw	r0, r22
 4c4:	b9 01       	movw	r22, r18
 4c6:	90 01       	movw	r18, r0
 4c8:	0c 01       	movw	r0, r24
 4ca:	ca 01       	movw	r24, r20
 4cc:	a0 01       	movw	r20, r0
 4ce:	11 24       	eor	r1, r1
 4d0:	ff 27       	eor	r31, r31
 4d2:	59 1b       	sub	r21, r25
 4d4:	99 f0       	breq	.+38     	; 0x4fc <__addsf3x+0x60>
 4d6:	59 3f       	cpi	r21, 0xF9	; 249
 4d8:	50 f4       	brcc	.+20     	; 0x4ee <__addsf3x+0x52>
 4da:	50 3e       	cpi	r21, 0xE0	; 224
 4dc:	68 f1       	brcs	.+90     	; 0x538 <__addsf3x+0x9c>
 4de:	1a 16       	cp	r1, r26
 4e0:	f0 40       	sbci	r31, 0x00	; 0
 4e2:	a2 2f       	mov	r26, r18
 4e4:	23 2f       	mov	r18, r19
 4e6:	34 2f       	mov	r19, r20
 4e8:	44 27       	eor	r20, r20
 4ea:	58 5f       	subi	r21, 0xF8	; 248
 4ec:	f3 cf       	rjmp	.-26     	; 0x4d4 <__addsf3x+0x38>
 4ee:	46 95       	lsr	r20
 4f0:	37 95       	ror	r19
 4f2:	27 95       	ror	r18
 4f4:	a7 95       	ror	r26
 4f6:	f0 40       	sbci	r31, 0x00	; 0
 4f8:	53 95       	inc	r21
 4fa:	c9 f7       	brne	.-14     	; 0x4ee <__addsf3x+0x52>
 4fc:	7e f4       	brtc	.+30     	; 0x51c <__addsf3x+0x80>
 4fe:	1f 16       	cp	r1, r31
 500:	ba 0b       	sbc	r27, r26
 502:	62 0b       	sbc	r22, r18
 504:	73 0b       	sbc	r23, r19
 506:	84 0b       	sbc	r24, r20
 508:	ba f0       	brmi	.+46     	; 0x538 <__addsf3x+0x9c>
 50a:	91 50       	subi	r25, 0x01	; 1
 50c:	a1 f0       	breq	.+40     	; 0x536 <__addsf3x+0x9a>
 50e:	ff 0f       	add	r31, r31
 510:	bb 1f       	adc	r27, r27
 512:	66 1f       	adc	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	88 1f       	adc	r24, r24
 518:	c2 f7       	brpl	.-16     	; 0x50a <__addsf3x+0x6e>
 51a:	0e c0       	rjmp	.+28     	; 0x538 <__addsf3x+0x9c>
 51c:	ba 0f       	add	r27, r26
 51e:	62 1f       	adc	r22, r18
 520:	73 1f       	adc	r23, r19
 522:	84 1f       	adc	r24, r20
 524:	48 f4       	brcc	.+18     	; 0x538 <__addsf3x+0x9c>
 526:	87 95       	ror	r24
 528:	77 95       	ror	r23
 52a:	67 95       	ror	r22
 52c:	b7 95       	ror	r27
 52e:	f7 95       	ror	r31
 530:	9e 3f       	cpi	r25, 0xFE	; 254
 532:	08 f0       	brcs	.+2      	; 0x536 <__addsf3x+0x9a>
 534:	b0 cf       	rjmp	.-160    	; 0x496 <__addsf3+0x28>
 536:	93 95       	inc	r25
 538:	88 0f       	add	r24, r24
 53a:	08 f0       	brcs	.+2      	; 0x53e <__addsf3x+0xa2>
 53c:	99 27       	eor	r25, r25
 53e:	ee 0f       	add	r30, r30
 540:	97 95       	ror	r25
 542:	87 95       	ror	r24
 544:	08 95       	ret

00000546 <__divsf3>:
 546:	0e 94 b7 02 	call	0x56e	; 0x56e <__divsf3x>
 54a:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__fp_round>
 54e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fp_pscB>
 552:	58 f0       	brcs	.+22     	; 0x56a <__divsf3+0x24>
 554:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_pscA>
 558:	40 f0       	brcs	.+16     	; 0x56a <__divsf3+0x24>
 55a:	29 f4       	brne	.+10     	; 0x566 <__divsf3+0x20>
 55c:	5f 3f       	cpi	r21, 0xFF	; 255
 55e:	29 f0       	breq	.+10     	; 0x56a <__divsf3+0x24>
 560:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_inf>
 564:	51 11       	cpse	r21, r1
 566:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__fp_szero>
 56a:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_nan>

0000056e <__divsf3x>:
 56e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__fp_split3>
 572:	68 f3       	brcs	.-38     	; 0x54e <__divsf3+0x8>

00000574 <__divsf3_pse>:
 574:	99 23       	and	r25, r25
 576:	b1 f3       	breq	.-20     	; 0x564 <__divsf3+0x1e>
 578:	55 23       	and	r21, r21
 57a:	91 f3       	breq	.-28     	; 0x560 <__divsf3+0x1a>
 57c:	95 1b       	sub	r25, r21
 57e:	55 0b       	sbc	r21, r21
 580:	bb 27       	eor	r27, r27
 582:	aa 27       	eor	r26, r26
 584:	62 17       	cp	r22, r18
 586:	73 07       	cpc	r23, r19
 588:	84 07       	cpc	r24, r20
 58a:	38 f0       	brcs	.+14     	; 0x59a <__divsf3_pse+0x26>
 58c:	9f 5f       	subi	r25, 0xFF	; 255
 58e:	5f 4f       	sbci	r21, 0xFF	; 255
 590:	22 0f       	add	r18, r18
 592:	33 1f       	adc	r19, r19
 594:	44 1f       	adc	r20, r20
 596:	aa 1f       	adc	r26, r26
 598:	a9 f3       	breq	.-22     	; 0x584 <__divsf3_pse+0x10>
 59a:	35 d0       	rcall	.+106    	; 0x606 <__divsf3_pse+0x92>
 59c:	0e 2e       	mov	r0, r30
 59e:	3a f0       	brmi	.+14     	; 0x5ae <__divsf3_pse+0x3a>
 5a0:	e0 e8       	ldi	r30, 0x80	; 128
 5a2:	32 d0       	rcall	.+100    	; 0x608 <__divsf3_pse+0x94>
 5a4:	91 50       	subi	r25, 0x01	; 1
 5a6:	50 40       	sbci	r21, 0x00	; 0
 5a8:	e6 95       	lsr	r30
 5aa:	00 1c       	adc	r0, r0
 5ac:	ca f7       	brpl	.-14     	; 0x5a0 <__divsf3_pse+0x2c>
 5ae:	2b d0       	rcall	.+86     	; 0x606 <__divsf3_pse+0x92>
 5b0:	fe 2f       	mov	r31, r30
 5b2:	29 d0       	rcall	.+82     	; 0x606 <__divsf3_pse+0x92>
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	bb 1f       	adc	r27, r27
 5bc:	26 17       	cp	r18, r22
 5be:	37 07       	cpc	r19, r23
 5c0:	48 07       	cpc	r20, r24
 5c2:	ab 07       	cpc	r26, r27
 5c4:	b0 e8       	ldi	r27, 0x80	; 128
 5c6:	09 f0       	breq	.+2      	; 0x5ca <__divsf3_pse+0x56>
 5c8:	bb 0b       	sbc	r27, r27
 5ca:	80 2d       	mov	r24, r0
 5cc:	bf 01       	movw	r22, r30
 5ce:	ff 27       	eor	r31, r31
 5d0:	93 58       	subi	r25, 0x83	; 131
 5d2:	5f 4f       	sbci	r21, 0xFF	; 255
 5d4:	3a f0       	brmi	.+14     	; 0x5e4 <__divsf3_pse+0x70>
 5d6:	9e 3f       	cpi	r25, 0xFE	; 254
 5d8:	51 05       	cpc	r21, r1
 5da:	78 f0       	brcs	.+30     	; 0x5fa <__divsf3_pse+0x86>
 5dc:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_inf>
 5e0:	0c 94 9d 03 	jmp	0x73a	; 0x73a <__fp_szero>
 5e4:	5f 3f       	cpi	r21, 0xFF	; 255
 5e6:	e4 f3       	brlt	.-8      	; 0x5e0 <__divsf3_pse+0x6c>
 5e8:	98 3e       	cpi	r25, 0xE8	; 232
 5ea:	d4 f3       	brlt	.-12     	; 0x5e0 <__divsf3_pse+0x6c>
 5ec:	86 95       	lsr	r24
 5ee:	77 95       	ror	r23
 5f0:	67 95       	ror	r22
 5f2:	b7 95       	ror	r27
 5f4:	f7 95       	ror	r31
 5f6:	9f 5f       	subi	r25, 0xFF	; 255
 5f8:	c9 f7       	brne	.-14     	; 0x5ec <__divsf3_pse+0x78>
 5fa:	88 0f       	add	r24, r24
 5fc:	91 1d       	adc	r25, r1
 5fe:	96 95       	lsr	r25
 600:	87 95       	ror	r24
 602:	97 f9       	bld	r25, 7
 604:	08 95       	ret
 606:	e1 e0       	ldi	r30, 0x01	; 1
 608:	66 0f       	add	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	bb 1f       	adc	r27, r27
 610:	62 17       	cp	r22, r18
 612:	73 07       	cpc	r23, r19
 614:	84 07       	cpc	r24, r20
 616:	ba 07       	cpc	r27, r26
 618:	20 f0       	brcs	.+8      	; 0x622 <__divsf3_pse+0xae>
 61a:	62 1b       	sub	r22, r18
 61c:	73 0b       	sbc	r23, r19
 61e:	84 0b       	sbc	r24, r20
 620:	ba 0b       	sbc	r27, r26
 622:	ee 1f       	adc	r30, r30
 624:	88 f7       	brcc	.-30     	; 0x608 <__divsf3_pse+0x94>
 626:	e0 95       	com	r30
 628:	08 95       	ret

0000062a <__floatunsisf>:
 62a:	e8 94       	clt
 62c:	09 c0       	rjmp	.+18     	; 0x640 <__floatsisf+0x12>

0000062e <__floatsisf>:
 62e:	97 fb       	bst	r25, 7
 630:	3e f4       	brtc	.+14     	; 0x640 <__floatsisf+0x12>
 632:	90 95       	com	r25
 634:	80 95       	com	r24
 636:	70 95       	com	r23
 638:	61 95       	neg	r22
 63a:	7f 4f       	sbci	r23, 0xFF	; 255
 63c:	8f 4f       	sbci	r24, 0xFF	; 255
 63e:	9f 4f       	sbci	r25, 0xFF	; 255
 640:	99 23       	and	r25, r25
 642:	a9 f0       	breq	.+42     	; 0x66e <__floatsisf+0x40>
 644:	f9 2f       	mov	r31, r25
 646:	96 e9       	ldi	r25, 0x96	; 150
 648:	bb 27       	eor	r27, r27
 64a:	93 95       	inc	r25
 64c:	f6 95       	lsr	r31
 64e:	87 95       	ror	r24
 650:	77 95       	ror	r23
 652:	67 95       	ror	r22
 654:	b7 95       	ror	r27
 656:	f1 11       	cpse	r31, r1
 658:	f8 cf       	rjmp	.-16     	; 0x64a <__floatsisf+0x1c>
 65a:	fa f4       	brpl	.+62     	; 0x69a <__floatsisf+0x6c>
 65c:	bb 0f       	add	r27, r27
 65e:	11 f4       	brne	.+4      	; 0x664 <__floatsisf+0x36>
 660:	60 ff       	sbrs	r22, 0
 662:	1b c0       	rjmp	.+54     	; 0x69a <__floatsisf+0x6c>
 664:	6f 5f       	subi	r22, 0xFF	; 255
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	8f 4f       	sbci	r24, 0xFF	; 255
 66a:	9f 4f       	sbci	r25, 0xFF	; 255
 66c:	16 c0       	rjmp	.+44     	; 0x69a <__floatsisf+0x6c>
 66e:	88 23       	and	r24, r24
 670:	11 f0       	breq	.+4      	; 0x676 <__floatsisf+0x48>
 672:	96 e9       	ldi	r25, 0x96	; 150
 674:	11 c0       	rjmp	.+34     	; 0x698 <__floatsisf+0x6a>
 676:	77 23       	and	r23, r23
 678:	21 f0       	breq	.+8      	; 0x682 <__floatsisf+0x54>
 67a:	9e e8       	ldi	r25, 0x8E	; 142
 67c:	87 2f       	mov	r24, r23
 67e:	76 2f       	mov	r23, r22
 680:	05 c0       	rjmp	.+10     	; 0x68c <__floatsisf+0x5e>
 682:	66 23       	and	r22, r22
 684:	71 f0       	breq	.+28     	; 0x6a2 <__floatsisf+0x74>
 686:	96 e8       	ldi	r25, 0x86	; 134
 688:	86 2f       	mov	r24, r22
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	60 e0       	ldi	r22, 0x00	; 0
 68e:	2a f0       	brmi	.+10     	; 0x69a <__floatsisf+0x6c>
 690:	9a 95       	dec	r25
 692:	66 0f       	add	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	da f7       	brpl	.-10     	; 0x690 <__floatsisf+0x62>
 69a:	88 0f       	add	r24, r24
 69c:	96 95       	lsr	r25
 69e:	87 95       	ror	r24
 6a0:	97 f9       	bld	r25, 7
 6a2:	08 95       	ret

000006a4 <__fp_inf>:
 6a4:	97 f9       	bld	r25, 7
 6a6:	9f 67       	ori	r25, 0x7F	; 127
 6a8:	80 e8       	ldi	r24, 0x80	; 128
 6aa:	70 e0       	ldi	r23, 0x00	; 0
 6ac:	60 e0       	ldi	r22, 0x00	; 0
 6ae:	08 95       	ret

000006b0 <__fp_nan>:
 6b0:	9f ef       	ldi	r25, 0xFF	; 255
 6b2:	80 ec       	ldi	r24, 0xC0	; 192
 6b4:	08 95       	ret

000006b6 <__fp_pscA>:
 6b6:	00 24       	eor	r0, r0
 6b8:	0a 94       	dec	r0
 6ba:	16 16       	cp	r1, r22
 6bc:	17 06       	cpc	r1, r23
 6be:	18 06       	cpc	r1, r24
 6c0:	09 06       	cpc	r0, r25
 6c2:	08 95       	ret

000006c4 <__fp_pscB>:
 6c4:	00 24       	eor	r0, r0
 6c6:	0a 94       	dec	r0
 6c8:	12 16       	cp	r1, r18
 6ca:	13 06       	cpc	r1, r19
 6cc:	14 06       	cpc	r1, r20
 6ce:	05 06       	cpc	r0, r21
 6d0:	08 95       	ret

000006d2 <__fp_round>:
 6d2:	09 2e       	mov	r0, r25
 6d4:	03 94       	inc	r0
 6d6:	00 0c       	add	r0, r0
 6d8:	11 f4       	brne	.+4      	; 0x6de <__fp_round+0xc>
 6da:	88 23       	and	r24, r24
 6dc:	52 f0       	brmi	.+20     	; 0x6f2 <__fp_round+0x20>
 6de:	bb 0f       	add	r27, r27
 6e0:	40 f4       	brcc	.+16     	; 0x6f2 <__fp_round+0x20>
 6e2:	bf 2b       	or	r27, r31
 6e4:	11 f4       	brne	.+4      	; 0x6ea <__fp_round+0x18>
 6e6:	60 ff       	sbrs	r22, 0
 6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <__fp_round+0x20>
 6ea:	6f 5f       	subi	r22, 0xFF	; 255
 6ec:	7f 4f       	sbci	r23, 0xFF	; 255
 6ee:	8f 4f       	sbci	r24, 0xFF	; 255
 6f0:	9f 4f       	sbci	r25, 0xFF	; 255
 6f2:	08 95       	ret

000006f4 <__fp_split3>:
 6f4:	57 fd       	sbrc	r21, 7
 6f6:	90 58       	subi	r25, 0x80	; 128
 6f8:	44 0f       	add	r20, r20
 6fa:	55 1f       	adc	r21, r21
 6fc:	59 f0       	breq	.+22     	; 0x714 <__fp_splitA+0x10>
 6fe:	5f 3f       	cpi	r21, 0xFF	; 255
 700:	71 f0       	breq	.+28     	; 0x71e <__fp_splitA+0x1a>
 702:	47 95       	ror	r20

00000704 <__fp_splitA>:
 704:	88 0f       	add	r24, r24
 706:	97 fb       	bst	r25, 7
 708:	99 1f       	adc	r25, r25
 70a:	61 f0       	breq	.+24     	; 0x724 <__fp_splitA+0x20>
 70c:	9f 3f       	cpi	r25, 0xFF	; 255
 70e:	79 f0       	breq	.+30     	; 0x72e <__fp_splitA+0x2a>
 710:	87 95       	ror	r24
 712:	08 95       	ret
 714:	12 16       	cp	r1, r18
 716:	13 06       	cpc	r1, r19
 718:	14 06       	cpc	r1, r20
 71a:	55 1f       	adc	r21, r21
 71c:	f2 cf       	rjmp	.-28     	; 0x702 <__fp_split3+0xe>
 71e:	46 95       	lsr	r20
 720:	f1 df       	rcall	.-30     	; 0x704 <__fp_splitA>
 722:	08 c0       	rjmp	.+16     	; 0x734 <__fp_splitA+0x30>
 724:	16 16       	cp	r1, r22
 726:	17 06       	cpc	r1, r23
 728:	18 06       	cpc	r1, r24
 72a:	99 1f       	adc	r25, r25
 72c:	f1 cf       	rjmp	.-30     	; 0x710 <__fp_splitA+0xc>
 72e:	86 95       	lsr	r24
 730:	71 05       	cpc	r23, r1
 732:	61 05       	cpc	r22, r1
 734:	08 94       	sec
 736:	08 95       	ret

00000738 <__fp_zero>:
 738:	e8 94       	clt

0000073a <__fp_szero>:
 73a:	bb 27       	eor	r27, r27
 73c:	66 27       	eor	r22, r22
 73e:	77 27       	eor	r23, r23
 740:	cb 01       	movw	r24, r22
 742:	97 f9       	bld	r25, 7
 744:	08 95       	ret

00000746 <__divmodhi4>:
 746:	97 fb       	bst	r25, 7
 748:	07 2e       	mov	r0, r23
 74a:	16 f4       	brtc	.+4      	; 0x750 <__divmodhi4+0xa>
 74c:	00 94       	com	r0
 74e:	07 d0       	rcall	.+14     	; 0x75e <__divmodhi4_neg1>
 750:	77 fd       	sbrc	r23, 7
 752:	09 d0       	rcall	.+18     	; 0x766 <__divmodhi4_neg2>
 754:	0e 94 b7 03 	call	0x76e	; 0x76e <__udivmodhi4>
 758:	07 fc       	sbrc	r0, 7
 75a:	05 d0       	rcall	.+10     	; 0x766 <__divmodhi4_neg2>
 75c:	3e f4       	brtc	.+14     	; 0x76c <__divmodhi4_exit>

0000075e <__divmodhi4_neg1>:
 75e:	90 95       	com	r25
 760:	81 95       	neg	r24
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	08 95       	ret

00000766 <__divmodhi4_neg2>:
 766:	70 95       	com	r23
 768:	61 95       	neg	r22
 76a:	7f 4f       	sbci	r23, 0xFF	; 255

0000076c <__divmodhi4_exit>:
 76c:	08 95       	ret

0000076e <__udivmodhi4>:
 76e:	aa 1b       	sub	r26, r26
 770:	bb 1b       	sub	r27, r27
 772:	51 e1       	ldi	r21, 0x11	; 17
 774:	07 c0       	rjmp	.+14     	; 0x784 <__udivmodhi4_ep>

00000776 <__udivmodhi4_loop>:
 776:	aa 1f       	adc	r26, r26
 778:	bb 1f       	adc	r27, r27
 77a:	a6 17       	cp	r26, r22
 77c:	b7 07       	cpc	r27, r23
 77e:	10 f0       	brcs	.+4      	; 0x784 <__udivmodhi4_ep>
 780:	a6 1b       	sub	r26, r22
 782:	b7 0b       	sbc	r27, r23

00000784 <__udivmodhi4_ep>:
 784:	88 1f       	adc	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	5a 95       	dec	r21
 78a:	a9 f7       	brne	.-22     	; 0x776 <__udivmodhi4_loop>
 78c:	80 95       	com	r24
 78e:	90 95       	com	r25
 790:	bc 01       	movw	r22, r24
 792:	cd 01       	movw	r24, r26
 794:	08 95       	ret

00000796 <_exit>:
 796:	f8 94       	cli

00000798 <__stop_program>:
 798:	ff cf       	rjmp	.-2      	; 0x798 <__stop_program>
